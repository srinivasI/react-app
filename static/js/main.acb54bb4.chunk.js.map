{"version":3,"sources":["TableRow.js","StockList.js","UserList.js","HOC.js","App.js","CounterExample.js","CustomCounter.js","serviceWorker.js","index.js"],"names":["TableRow","this","props","obj","id","name","Component","StockList","data","Array","map","object","i","key","className","tabRow","UserList","Hoc","HocComponent","state","Stocks","Users","CounterExample","useState","count","setCount","useEffect","document","title","onClick","CustomCounter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAmBeA,E,uKAbX,OACI,4BACE,4BACGC,KAAKC,MAAMC,IAAIC,IAElB,4BACGH,KAAKC,MAAMC,IAAIE,W,GARLC,aC+BRC,E,kDA7BX,WAAYL,GAAQ,uCACVA,G,qDAIN,GAAGD,KAAKC,MAAMM,gBAAgBC,MAC5B,OAAOR,KAAKC,MAAMM,KAAKE,KAAI,SAASC,EAAQC,GACxC,OAAO,kBAAC,EAAD,CAAUT,IAAKQ,EAAQE,IAAKD,S,+BAKzC,OACI,yBAAKE,UAAU,aACf,2BAAOA,UAAU,uBACf,+BACE,4BACE,kCACA,sCAGJ,+BACGb,KAAKc,gB,GAvBET,aC8BTU,E,kDA7BX,WAAYd,GAAQ,uCACVA,G,qDAIN,GAAGD,KAAKC,MAAMM,gBAAgBC,MAC5B,OAAOR,KAAKC,MAAMM,KAAKE,KAAI,SAASC,EAAQC,GACxC,OAAO,kBAAC,EAAD,CAAUT,IAAKQ,EAAQE,IAAKD,S,+BAKzC,OACI,yBAAKE,UAAU,aACf,2BAAOA,UAAU,uBACf,+BACE,4BACE,kCACA,sCAGJ,+BACGb,KAAKc,gB,GAvBCT,aCHR,SAASW,EAAIC,EAAcV,GACtC,yDACI,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDiB,MAAQ,CACTX,KAAMA,GAHK,EADvB,qDASQ,OACI,kBAACU,EAAD,eAAcV,KAAMP,KAAKkB,MAAMX,MAAUP,KAAKC,YAV1D,GAAqBI,aCIzB,IA+BMc,EAASH,EACbV,EAhCiB,CACjB,CACIH,GAAI,EACJC,KAAM,OAGV,CACID,GAAI,EACJC,KAAM,WAEV,CACID,GAAI,EACJC,KAAM,cAwBNgB,EAAQJ,EACZD,EAtBgB,CAChB,CACIZ,GAAI,EACJC,KAAM,YAGV,CACID,GAAI,EACJC,KAAM,SAEV,CACID,GAAI,EACJC,KAAM,U,GAeMC,Y,MC7BHgB,MAlBf,WAA2B,IAAD,EACEC,mBAAS,GADX,mBACjBC,EADiB,KACVC,EADU,KASxB,OALAC,qBAAU,WAERC,SAASC,MAAT,sBAAgCJ,EAAhC,aAIA,6BACE,0CAAgBA,EAAhB,UACA,4BAAQK,QAAS,kBAAMJ,EAASD,EAAQ,KAAxC,cCSSM,MAff,WAA0B,IANDF,EAMA,EACGL,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,KAQvB,OAduBG,EASN,eAAD,OAAgBJ,EAAhB,UARhBE,qBAAU,WACRC,SAASC,MAAQA,IAChB,CAACA,IAOHF,qBAAU,WACRC,SAASC,MAAT,sBAAgCJ,EAAhC,aAID,6BACE,0CAAgBA,EAAhB,UACA,4BAAQK,QATW,kBAAMJ,EAASD,EAAQ,KAS1C,cCPcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.acb54bb4.chunk.js","sourcesContent":["// TableRow.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass TableRow extends Component {\r\n  render() {\r\n    return (\r\n        <tr>\r\n          <td>\r\n            {this.props.obj.id}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.name}\r\n          </td>\r\n        </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableRow;","// StockList.js\r\n\r\nimport React, { Component } from 'react';\r\nimport TableRow from './TableRow';\r\n\r\nclass StockList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n      \r\n      tabRow(){\r\n        if(this.props.data instanceof Array){\r\n          return this.props.data.map(function(object, i){\r\n              return <TableRow obj={object} key={i} />;\r\n          })\r\n        }\r\n      }\r\n      render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <table className=\"table table-striped\">\r\n              <thead>\r\n                <tr>\r\n                  <td>ID</td>\r\n                  <td>Name</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.tabRow()}\r\n              </tbody>\r\n            </table>\r\n        </div>\r\n        );\r\n      }\r\n}\r\nexport default StockList;","// UserList.js\r\n\r\nimport React, { Component } from 'react';\r\nimport TableRow from './TableRow';\r\n\r\nclass UserList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n      \r\n      tabRow(){\r\n        if(this.props.data instanceof Array){\r\n          return this.props.data.map(function(object, i){\r\n              return <TableRow obj={object} key={i} />;\r\n          })\r\n        }\r\n      }\r\n      render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <table className=\"table table-striped\">\r\n              <thead>\r\n                <tr>\r\n                  <td>ID</td>\r\n                  <td>Name</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.tabRow()}\r\n              </tbody>\r\n            </table>\r\n        </div>\r\n        );\r\n      }\r\n}\r\nexport default UserList;","import React, {Component} from 'react';\r\n\r\nexport default function Hoc(HocComponent, data){\r\n    return class extends Component{\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                data: data\r\n            };\r\n        }\r\n        \r\n        render(){\r\n            return (\r\n                <HocComponent data={this.state.data} {...this.props} />\r\n            );\r\n        }\r\n    } \r\n}","// App.js\n\nimport React, { Component } from 'react';\nimport StockList from './StockList';\nimport UserList from './UserList';\nimport Hoc from './HOC';\n\nconst StocksData = [\n  {\n      id: 1,\n      name: 'TCS'\n        \n  },\n  {\n      id: 2,\n      name: 'Infosys'\n  },\n  {\n      id: 3,\n      name: 'Reliance'\n  }\n];\nconst UsersData = [\n  {\n      id: 1,\n      name: 'Srinivas'\n        \n  },\n  {\n      id: 2,\n      name: 'Vijay'\n  },\n  {\n      id: 3,\n      name: 'Naga'\n  }\n];\n\nconst Stocks = Hoc(\n  StockList,\n  StocksData\n);\n\nconst Users = Hoc(\n  UserList,\n  UsersData\n);\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Stocks></Stocks>\n        <Users></Users>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React, { useState, useEffect } from 'react';  \r\n  \r\nfunction CounterExample() {  \r\n  const [count, setCount] = useState(0);  \r\n  \r\n  // Similar to componentDidMount and componentDidUpdate:  \r\n  useEffect(() => {  \r\n    // Update the document title using the browser API  \r\n    document.title = `You clicked ${count} times`;  \r\n  });  \r\n  \r\n  return (  \r\n    <div>  \r\n      <p>You clicked {count} times</p>  \r\n      <button onClick={() => setCount(count + 1)}>  \r\n        Click me  \r\n      </button>  \r\n    </div>  \r\n  );  \r\n}  \r\nexport default CounterExample;","import React, { useState, useEffect } from 'react';  \r\n  \r\nconst useDocumentTitle = title => {  \r\n  useEffect(() => {  \r\n    document.title = title;  \r\n  }, [title])  \r\n}  \r\n  \r\nfunction CustomCounter() {  \r\n  const [count, setCount] = useState(0);  \r\n  const incrementCount = () => setCount(count + 1);  \r\n  useDocumentTitle(`You clicked ${count} times`);  \r\n   useEffect(() => {  \r\n     document.title = `You clicked ${count} times`  \r\n  });  \r\n  \r\n  return (  \r\n    <div>  \r\n      <p>You clicked {count} times</p>  \r\n      <button onClick={incrementCount}>Click me</button>  \r\n    </div>  \r\n  )  \r\n}  \r\nexport default CustomCounter;  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CounterExample from './CounterExample';\nimport CustomCounter from './CustomCounter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CounterExample />\n    <CustomCounter/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}